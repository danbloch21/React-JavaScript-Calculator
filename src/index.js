import React from "react";
import ReactDOM from "react-dom";
import "./index.css";

function App() {
  const [expression, setExpression] = React.useState("");
  {
    /** declare state variable expression and updater, with default value of an empty string */
  }

  const [answer, setAnswer] = React.useState(0);
  {
    /** declare state variable answer and updater, with default value of 0 */
  }

  const isOperator = (symbol) => {
    if (["+", "-", "/", "*"].includes(symbol)) {
      return true;
    } else {
      return false;
    }
    {
      /** function to check if a symbol passed to it is an operator */
    }
  };

  const isDecimal = (symbol) => {
    if (["."].includes(symbol)) {
      return true;
    } else {
      return false;
    }
    {
      /** function to check if a symbol passed to it is a decimal point */
    }
  };

  const display = (symbol) => {
    {
      /** defines function applied by the onClick handler. Runs every time you click a number or symbol button */
    }

    const isSymbolOperator = isOperator(symbol);
    const isSymbolDecimal = isDecimal(symbol);

    {
      /** lines 43 and 44 each call the function isOperator and isDecimal with the symbol generated by the corresponding buttons passed in and stored in their respective variables isSymbolOperator and isSymbolDecimal */
    }
    setExpression((prev) => {
      {
        /** setExpression takes previous expression and updates it by adding symbol passed to it from each button when onClick handler is activated */
      }
      if (prev.length === 0) {
        if (
          symbol === "/" ||
          symbol === "+" ||
          symbol === "-" ||
          symbol === "*"
        ) {
          return 0;
        }
        return prev + symbol;
      }
      {
        /** prevents entry of an operator before a number button has been pressed */
      }
      if (isSymbolOperator === true) {
        const lastChar = prev[prev.length - 1];

        if (isOperator(lastChar)) {
          return prev;
        } else {
          return prev + symbol;
        }
        {
          /** first if statement allows entry of any symbol if nothing has been entered yet */
        }
        {
          /** second creates a variable to store last character of previous expression by passing in the character one position back from the end of the string's length - if the first symbol entered returns true via isSymbolOperator function */
        }
        {
          /** third returns the previous expression only - if value stored in prevLastChar above returns true via isOperator function. Otherwise it returns previous expression and next symbol entered. Thus you can't enter an operator twice  */
        }
      }
      if (isSymbolDecimal === true) {
        const lastChar = prev[prev.length - 1];
        const penultimateChar = prev[prev.length - 2];

        if (isDecimal(lastChar)) {
          return prev;
        }
        if (isDecimal(penultimateChar)) {
          return prev;
        } else {
          return prev + symbol;
        }
        {
          /** fourth if statement does the same as third above for a decimal point, so you can't enter that twice either */
        }
        {
          /** fifth if statement prevents entry of a second decimal point after a number following a decimal point */
        }
      }
      return prev + symbol;
      {
        /** and if the first symbol entered is a number, display it along with the next symbol */
      }
    });

    if (expression[expression.length - 1] === "=") {
      if (/[0-9.]/.test(symbol)) {
        setExpression(symbol);
      } else {
        setExpression(answer + symbol);
      }

      {
        /** if a symbol button is pressed after hitting equals for a total, equals is replaced by the symbol so you can continue the calculation. If a number button is pressed, previous calculation is cleared and you can start afresh */
      }
    }
  };

  const calculate = () => {
    {
      /* defines function applied by onClick handler */
    }
    setAnswer(eval(expression)); // eval is a regular JS function that evaluates the expression of a string //
    setExpression((prev) => prev + "=");
  };

  const allClear = () => {
    {
      /* defines function applied by onClick handler */
    }
    setExpression("");
    setAnswer(0);

    {
      /* resets input values and calculated totals to 0 */
    }
  };

  const clear = () => {
    {
      /* defines function applied by onClick handler */
    }
    setExpression((prev) =>
      prev
        .split("")
        .slice(0, prev.length - 1)
        .join("")
    );
    setAnswer(0);

    {
      /* clears only the last input value and resets calculated total to 0 */
    }
  };

  return (
    <div className="container">
      <div className="grid">
        <div id="display" onClick={display} className="dis">
          <input type="text" value={expression} placeholder="0" disabled />
          {/* displays the input value generated by expression updater as a string, plus a placeholder 0. Disabled means it can't be selected or altered */}
          <div className="total">{answer}</div>
          {/* displays the calculated total from updated answer */}
        </div>
        <div onClick={allClear} className="padButton AC tomato">
          AC
        </div>
        <div id="clear" onClick={clear} className="padButton C tomato">
          C
        </div>
        <div id="divide" onClick={() => display("/")} className="padButton div">
          /
          {/* onClick handler activates display function which updates symbol parameter generated from expression updater as a string */}
        </div>
        <div
          id="multiply"
          onClick={() => display("*")}
          className="padButton times"
        >
          X
        </div>
        <div
          id="seven"
          onClick={() => display("7")}
          className="padButton seven dark-gray"
        >
          7
        </div>
        <div
          id="eight"
          onClick={() => display("8")}
          className="padButton eight dark-gray"
        >
          8
        </div>
        <div
          id="nine"
          onClick={() => display("9")}
          className="padButton nine dark-gray"
        >
          9
        </div>
        <div
          id="subtract"
          onClick={() => display("-")}
          className="padButton minus"
        >
          -
        </div>
        <div
          id="four"
          onClick={() => display("4")}
          className="padButton four dark-gray"
        >
          4
        </div>
        <div
          id="five"
          onClick={() => display("5")}
          className="padButton five dark-gray"
        >
          5
        </div>
        <div
          id="six"
          onClick={() => display("6")}
          className="padButton six dark-gray"
        >
          6
        </div>
        <div id="add" onClick={() => display("+")} className="padButton plus">
          +
        </div>
        <div
          id="one"
          onClick={() => display("1")}
          className="padButton one dark-gray"
        >
          1
        </div>
        <div
          id="two"
          onClick={() => display("2")}
          className="padButton two dark-gray"
        >
          2
        </div>
        <div
          id="three"
          onClick={() => display("3")}
          className="padButton three dark-gray"
        >
          3
        </div>
        <div id="equals" onClick={calculate} className="padButton equals blue">
          ={/* equals button triggers calculate function above */}
        </div>
        <div
          id="zero"
          onClick={() => display("0")}
          className="padButton zero dark-gray"
        >
          0
        </div>
        <div
          id="decimal"
          onClick={() => display(".")}
          className="padButton dot"
        >
          .
        </div>
      </div>
    </div>
  );
}

ReactDOM.render(<App />, document.getElementById("root"));
